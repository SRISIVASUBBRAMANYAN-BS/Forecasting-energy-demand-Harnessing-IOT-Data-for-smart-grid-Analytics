import tkinter as tk
from tkinter import ttk
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv('Dataset.csv')

# Define the features and target variable
features = df[['temperature', 'humidity', 'visibility', 'apparentTemperature', 'pressure', 'windSpeed', 
               'cloudCover', 'windBearing', 'precipIntensity', 'dewPoint', 'precipProbability', 'Month', 
               'Day', 'Hour', 'Minute']]
target = df['House overall [kW]']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Train a RandomForestRegressor model
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# Create Tkinter window
window = tk.Tk()
window.title("Smart Grid Energy Consumption Predictor")

# Function to predict energy consumption
def predict_energy_consumption():
    # Get input values from GUI
    temperature = float(temperature_entry.get())
    humidity = float(humidity_entry.get())
    visibility = float(visibility_entry.get())
    apparent_temp = float(apparent_temp_entry.get())
    pressure = float(pressure_entry.get())
    wind_speed = float(wind_speed_entry.get())
    cloud_cover = float(cloud_cover_entry.get())
    wind_bearing = float(wind_bearing_entry.get())
    precip_intensity = float(precip_intensity_entry.get())
    dew_point = float(dew_point_entry.get())
    precip_probability = float(precip_probability_entry.get())
    month = int(month_entry.get())
    day = int(day_entry.get())
    hour = int(hour_entry.get())
    minute = int(minute_entry.get())
    
    # Create a DataFrame for the input data
    input_data = pd.DataFrame({'temperature': [temperature], 'humidity': [humidity], 'visibility': [visibility], 
                               'apparentTemperature': [apparent_temp], 'pressure': [pressure], 'windSpeed': [wind_speed], 
                               'cloudCover': [cloud_cover], 'windBearing': [wind_bearing], 'precipIntensity': [precip_intensity], 
                               'dewPoint': [dew_point], 'precipProbability': [precip_probability], 'Month': [month], 
                               'Day': [day], 'Hour': [hour], 'Minute': [minute]})
    
    # Predict energy consumption
    prediction = model.predict(input_data)
    
    # Display predicted value
    predicted_label.config(text=f'Predicted Energy Consumption: {prediction[0]:.2f} kW')

# GUI Widgets
tk.Label(window, text="Input Parameters").grid(row=0, column=0, columnspan=2)

tk.Label(window, text="Temperature").grid(row=1, column=0)
temperature_entry = tk.Entry(window)
temperature_entry.grid(row=1, column=1)

tk.Label(window, text="Humidity").grid(row=2, column=0)
humidity_entry = tk.Entry(window)
humidity_entry.grid(row=2, column=1)

# Add other input fields similarly...

# Button to predict energy consumption
predict_button = tk.Button(window, text="Predict", command=predict_energy_consumption)
predict_button.grid(row=14, column=0, columnspan=2)

# Label to display predicted energy consumption
predicted_label = tk.Label(window, text="")
predicted_label.grid(row=15, column=0, columnspan=2)

window.mainloop()
